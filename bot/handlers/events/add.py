from datetime import datetime

from aiogram import Bot, Router, types
from aiogram.filters.command import CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.keyboards.admin import event_menu
from core.database import AsyncSessionLocal
from core.models import Event

router = Router()


class AddEvent(StatesGroup):
    title = State()
    description = State()
    date = State()
    total_tickets = State()
    cover = State()


@router.message(lambda message: message.text and "–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ" in message.text)
async def add_event_start(
    message: types.Message, state: FSMContext, command: CommandObject | None = None
):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    await state.set_state(AddEvent.title)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")


@router.message(AddEvent.title)
async def add_event_title(
    message: types.Message, state: FSMContext, command: CommandObject | None = None
):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    await state.update_data(title=message.text)
    await state.set_state(AddEvent.description)
    await message.answer("üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")


@router.message(AddEvent.description)
async def add_event_description(
    message: types.Message, state: FSMContext, command: CommandObject | None = None
):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    await state.update_data(description=message.text)
    await state.set_state(AddEvent.date)
    await message.answer("üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–≥–≥–≥–≥-–º–º-–¥–¥ —á—á:–º–º):")


@router.message(AddEvent.date)
async def add_event_date(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ datetime)"""
    try:
        parsed_date = datetime.strptime(message.text.strip(), "%Y-%m-%d %H:%M")
    except ValueError:
        await message.answer(
            "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –≥–≥–≥–≥-–º–º-–¥–¥ —á—á:–º–º\n–ü—Ä–∏–º–µ—Ä: 2025-04-27 19:30"
        )
        return

    await state.update_data(date=parsed_date)
    await state.set_state(AddEvent.total_tickets)
    await message.answer("üéü –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤:")


@router.message(AddEvent.total_tickets)
async def add_event_total_tickets(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ–±–ª–æ–∂–∫—É –ø–æ—Å–ª–µ –±–∏–ª–µ—Ç–æ–≤"""
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤:")
        return

    await state.update_data(total_tickets=int(message.text))
    await state.set_state(AddEvent.cover)
    await message.answer(
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ –æ–±–ª–æ–∂–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Ñ–æ—Ç–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ):"
    )


from pathlib import Path


@router.message(AddEvent.cover)
async def add_event_cover(message: types.Message, state: FSMContext, bot: Bot):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–ª–æ–∂–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    if not message.photo:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ.")
        return

    data = await state.get_data()

    async with AsyncSessionLocal() as session:
        # —Å–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –æ–±–ª–æ–∂–∫–∏
        event = Event(
            title=data["title"],
            description=data["description"],
            date=data["date"],
            total_tickets=data["total_tickets"],
            sold_tickets=0,
        )
        session.add(event)
        await session.flush()

        # —Å–æ–∑–¥–∞–µ–º –ø—É—Ç—å
        event_dir = Path("media/events")
        event_dir.mkdir(parents=True, exist_ok=True)
        cover_path = event_dir / f"{event.id}.jpg"

        photo: types.PhotoSize = message.photo[-1]

        # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ file_id
        await bot.download(file=photo.file_id, destination=cover_path)

        event.cover_path = str(cover_path)
        await session.commit()

    await state.clear()
    await message.answer(
        "‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤–º–µ—Å—Ç–µ —Å –æ–±–ª–æ–∂–∫–æ–π!", reply_markup=event_menu()
    )
