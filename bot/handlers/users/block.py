from aiogram import Router, types
from aiogram.filters.command import CommandObject
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.future import select

from core.database import AsyncSessionLocal
from core.models import User

router = Router()


@router.message(
    lambda message: message.text and "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" in message.text
)
async def block_user_start(
    message: types.Message, command: CommandObject | None = None
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.is_admin == False))
        users = result.scalars().all()

    if not users:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
        return

    kb = InlineKeyboardBuilder()
    for user in users:
        kb.button(
            text=user.username or f"ID: {user.telegram_id}",
            callback_data=f"block_{user.telegram_id}",
        )

    kb.adjust(1)
    await message.answer(
        "üö´ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", reply_markup=kb.as_markup()
    )


@router.callback_query(lambda c: c.data.startswith("block_"))
async def block_user(
    callback: types.CallbackQuery, command: CommandObject | None = None
):
    """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(callback.data.split("_")[1])
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == user_id))
        user = result.scalars().first()

        if user:
            user.is_blocked = True
            await session.commit()
            await callback.message.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!"
            )
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await callback.answer()
