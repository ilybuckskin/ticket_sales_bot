import re

from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.future import select

from bot.keyboards.main import main_menu
from bot.utils.pdf_ticket import generate_ticket_pdf
from core.database import AsyncSessionLocal
from core.models import Event, Ticket, User

router = Router()


class BuyTicket(StatesGroup):
    event_id = State()
    quantity = State()
    full_name = State()
    phone = State()
    email = State()
    waiting_for_payment = State()


@router.callback_query(lambda c: c.data.startswith("event_"))
async def choose_event(callback: types.CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[1])
    await state.update_data(event_id=event_id)
    await state.set_state(BuyTicket.quantity)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤:")
    await callback.answer()


@router.message(BuyTicket.quantity)
async def input_quantity(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤"""
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer(
            "‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):"
        )
        return

    quantity = int(message.text)

    data = await state.get_data()
    event_id = data.get("event_id")

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Event).where(Event.id == event_id))
        event = result.scalars().first()

        if not event:
            await message.answer("‚ùó –û—à–∏–±–∫–∞! –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return

        available_tickets = event.total_tickets - event.sold_tickets

        if quantity > available_tickets:
            await message.answer(
                f"‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–ª–µ—Ç–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {available_tickets} —à—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
            )
            return

    await state.update_data(quantity=quantity)
    await state.set_state(BuyTicket.full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")


@router.message(BuyTicket.full_name)
async def input_full_name(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω"""
    if len(message.text.strip()) < 3:
        await message.answer("‚ùó –§–ò–û —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
        return

    await state.update_data(full_name=message.text.strip())
    await state.set_state(BuyTicket.phone)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä 994501112233):"
    )


@router.message(BuyTicket.phone)
async def input_phone(message: types.Message, state: FSMContext):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip()

    if not phone.isdigit() or len(phone) < 10:
        await message.answer(
            "‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤:"
        )
        return

    await state.update_data(phone=phone)
    await state.set_state(BuyTicket.email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Email:")


@router.message(BuyTicket.email)
async def input_email(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ–ø–ª–∞—Ç—É"""

    email = message.text.strip()
    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        await message.answer("‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(email=email)
    await state.set_state(BuyTicket.waiting_for_payment)

    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    await message.answer(
        "üí≥ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n"
        "üëâ https://example.com/pay (—Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂)\n\n"
        "–ö–æ–≥–¥–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")]], resize_keyboard=True
        ),
    )


@router.message(lambda message: message.text == "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")
async def confirm_payment(message: types.Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã –∏ –≤—ã–¥–∞—á–∞ –±–∏–ª–µ—Ç–æ–≤"""
    data = await state.get_data()
    user_id = message.from_user.id

    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Event).where(Event.id == data["event_id"])
        )
        event = result.scalars().first()

        user_result = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = user_result.scalars().first()

        if not user:
            user = User(telegram_id=user_id, username=message.from_user.username)
            session.add(user)
            await session.flush()

        tickets = []
        for _ in range(data["quantity"]):
            ticket = Ticket(user_id=user.id, event_id=data["event_id"], is_used=False)
            session.add(ticket)
            await session.flush()
            tickets.append(ticket)

        event.sold_tickets += len(tickets)
        await session.commit()

    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∏–ª–µ—Ç—ã
    for ticket in tickets:
        pdf_buffer = generate_ticket_pdf(
            event_title=event.title,
            event_date=event.date,
            ticket_id=ticket.id,
            background_path=event.cover_path,
        )

        await message.answer_document(
            types.BufferedInputFile(
                pdf_buffer.read(), filename=f"ticket_{ticket.id}.pdf"
            )
        )

    await message.answer(
        "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –±–∏–ª–µ—Ç—ã –≤—ã—Å–ª–∞–Ω—ã!", reply_markup=main_menu()
    )
